-- 캘린더 검색시에 필터를 타지 않는다?
2020-06-24 09:37:48 KST LOG:  duration: 680.031 ms  execute <unnamed>: select event0_.id as id1_205_, event0_.created_at as created_2_205_, event0_.updated_at as updated_3_205_, event0_.creator_id as creator20_205_, event0_.description as descript4_205_, event0_.end_time as end_time5_205_, event0_.html_link as html_lin6_205_, event0_.location as location7_205_, event0_.own_company_id as own_com21_205_, event0_.parent_id as parent_22_205_, event0_.phase as phase8_205_, event0_.recur_count as recur_co9_205_, event0_.ex_dates as ex_date10_205_, event0_.recurrence as recurre11_205_, event0_.recur_until as recur_u12_205_, event0_.reference_id as referen13_205_, event0_.start_time as start_t14_205_, event0_.summary as summary15_205_, event0_.time_type as time_ty16_205_, event0_.time_zone as time_zo17_205_, event0_.type as type18_205_, event0_.visibility as visibil19_205_ from go_calendar_events event0_ inner join go_calendar_event_mappings calendars1_ on event0_.id=calendars1_.event_id inner join go_calendars calendar2_ on calendars1_.calendar_id=calendar2_.id where calendar2_.id=28784 and (event0_.start_time<=$1 and event0_.end_time>=$2 and (event0_.recurrence is null) or (event0_.recur_until is null or (event0_.recur_until is not null) and event0_.recur_until>=$3) and event0_.start_time<=$4 and (event0_.recurrence is not null))
2020-06-24 09:37:48 KST LOG:  connection authorized: user=repl database=template1
2020-06-24 09:37:48 KST DETAIL:  parameters: $1 = '2020-07-11 23:59:59.999', $2 = '2020-05-24 00:00:00', $3 = '2020-05-24 00:00:00', $4 = '2020-07-11 23:59:59.999'
2020-06-24 09:37:52 KST LOG:  connection received: host=10.0.1.18 port=51498
2020-06-24 09:37:48 KST LOG:  duration: 680.023 ms  plan:
        Query Text: select event0_.id as id1_205_, event0_.created_at as created_2_205_, event0_.updated_at as updated_3_205_, event0_.creator_id as creator20_205_, event0_.description as descript4_205_, event0_.end_time as end_time5_205_, event0_.html_link as html_lin6_205_, event0_.location as location7_205_, event0_.own_company_id as own_com21_205_, event0_.parent_id as parent_22_205_, event0_.phase as phase8_205_, event0_.recur_count as recur_co9_205_, event0_.ex_dates as ex_date10_205_, event0_.recurrence as recurre11_205_, event0_.recur_until as recur_u12_205_, event0_.reference_id as referen13_205_, event0_.start_time as start_t14_205_, event0_.summary as summary15_205_, event0_.time_type as time_ty16_205_, event0_.time_zone as time_zo17_205_, event0_.type as type18_205_, event0_.visibility as visibil19_205_ from go_calendar_events event0_ inner join go_calendar_event_mappings calendars1_ on event0_.id=calendars1_.event_id inner join go_calendars calendar2_ on calendars1_.calendar_id=calendar2_.id where calendar2_.id=28784 and (event0_.start_time<=$1 and event0_.end_time>=$2 and (event0_.recurrence is null) or (event0_.recur_until is null or (event0_.recur_until is not null) and event0_.recur_until>=$3) and event0_.start_time<=$4 and (event0_.recurrence is not null))
        Nested Loop  (cost=45158.75..53638.46 rows=394 width=880)
          ->  Index Only Scan using pk_calendars on go_calendars calendar2_  (cost=0.29..4.31 rows=1 width=8)
                Index Cond: (id = 28784)
          ->  Hash Join  (cost=45158.45..53630.21 rows=394 width=888)
                Hash Cond: (calendars1_.event_id = event0_.id)
                ->  Bitmap Heap Scan on go_calendar_event_mappings calendars1_  (cost=210.77..8599.17 rows=9076 width=16)
                      Recheck Cond: (calendar_id = 28784)
                      ->  Bitmap Index Scan on idx1_calendar_event_mappings  (cost=0.00..208.50 rows=9076 width=0)
                            Index Cond: (calendar_id = 28784)
                ->  Hash  (cost=44397.44..44397.44 rows=44020 width=880)
                      Buckets: 8192  Batches: 1  Memory Usage: 10165kB
                      ->  Seq Scan on go_calendar_events event0_  (cost=0.00..44397.44 rows=44020 width=880)
                            Filter: ((start_time <= '2020-07-11 23:59:59.999'::timestamp without time zone) AND (((end_time >= '2020-05-24 00:00:00'::timestamp without time zone) AND (recurrence IS NULL)) OR (((recur_until IS NULL) OR ((recur_until IS NOT NULL) AND (recur_until >= '2020-05-24 00:00:00'::timestamp without time zone))) AND (recurrence IS NOT NULL))))
